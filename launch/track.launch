<?xml version="1.0"?>

<launch>
    <!-- ARGUMENTS -->
    <arg name="obj_recognition_viewer_launch"                        default="true" />
    <arg name="rviz_launch"                                          default="true" />

    <!-- Arguments for Realsense Camera -->
    <arg name="nodelet_manager"                                     default="nodelet_manager"/>
    <arg name="camera"                                              default="realsense" />

    <!-- Arguments for Image Tracking -->
    <arg name="tracker_image_source_topic"                          default="/$(arg camera)/color/image_raw" />
    <arg name="tracker_image_output_topic"                          default="/obj_tracking_image" />
    <arg name="tracker_type"                                        default="CSRT" />
    <arg name="tracker_bbox_topic"                                  default="/tracked_obj_bbox" />

    <!-- Arguments for Object Point Cloud Extraction -->
    <arg name="extractor_input_point_cloud_topic"                   default="/$(arg camera)/depth_registered/points" />
    <arg name="extractor_input_bbox_topic"                          default="$(arg tracker_bbox_topic)" />
    <arg name="extractor_output_point_cloud_topic"                  default="/tracked_object_point_cloud" />

    <!-- Arguments for Point Cloud Pose Estimation -->
    <arg name="icp_or_pf"                                           default="true" />
    <arg name="pose_estimation_pointcloud_input"                    default="/$(arg camera)/voxel_grid/output" />
    <arg name="pose_estimation_pointcloud_ouput"                    default="pose_estimated_pointcloud" />
    <arg name="pose_estimation_pointcloud_frame"                    default="pose_estimation_pointcloud_frame" />
    <arg name="pose_estimation_template_filename"                   default="$(find arm_vs)/dataset/mustard/mustard.pcd" />
    <!-- <arg name="pose_estimation_template_filename"             default="$(find arm_vs)/dataset/beer/beer_coarse.pcd" /> -->
    <!-- <arg name="pose_estimation_template_filename"             default="$(find arm_vs)/dataset/cal_mug/cal_mug_clean.pcd" /> -->

    <!-- Arguments for PCL Nodelets -->
    <arg name="pcl_nodelet_manager"                                 default="$(arg nodelet_manager)"/>
    <arg name="voxel_grid_filter_axis"                              default="z" />
    
    <!-- Arguments for OpenCL Caffe -->
    <arg name="opencl_caffe_nodelet_manager"                        default="$(arg nodelet_manager)" />
    <arg name="opencl_caffe_nodelet"                                default="opencl_caffe_nodelet" />
    <arg name="opencl_caffe_viewer"                                 default="opencl_caffe_viewer" />
    <arg name="obj_inference_output_topic"                          default="/$(arg camera)/opencl_caffe/inference" />

    <!-- LAUNCH NODE AND NODELETS -->

    <!-- Rigid transform between camera and end effector, rigid transform gotten from calibration -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="camera_to_hand" 
        args="-0.0187845171388 0.0629403083384 -0.0936029139899
                -0.5111042314 0.499085936412 0.50680045647 0.482533926313 
                mico_link_hand $(arg camera)_link" />

    <!-- Desired Pose Static Transform -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="desired_camera_pose" 
        args="0 0 -0.4 0 0 0 1 $(arg pose_estimation_pointcloud_frame) desired_camera_pose" />

    <!-- Realsense Camera Launcher -->
    <include file="$(find realsense2_camera)/launch/rs_rgbd.launch"> 
        <arg name="manager"                     value="$(arg nodelet_manager)"/>
        <arg name="camera"                      value="$(arg camera)" />
    </include>

    <!-- Nodelets -->
    <group ns="$(arg camera)">
        
        <!-- opencl caffe object recognition nodelet -->
        <include file="$(find opencl_caffe_launch)/launch/includes/nodelet.launch">
            <arg name="name"                    value="$(arg opencl_caffe_nodelet)" />
            <arg name="manager"                 value="$(arg opencl_caffe_nodelet_manager)" />
            <arg name="input_topic"             value="$(arg tracker_image_source_topic)" />
            <arg name="output_topic"            value="$(arg obj_inference_output_topic)" />
        </include>
        
        <!-- nodelet for object recognition viewer -->
        <include file="$(find opencl_caffe_launch)/launch/includes/viewer.launch" if="$(arg obj_recognition_viewer_launch)">
            <arg name="name"                    value="$(arg opencl_caffe_viewer)" />
            <arg name="input_topic"             value="$(arg tracker_image_source_topic)" />
            <arg name="output_topic"            value="$(arg obj_inference_output_topic)" />
        </include>

        <!-- <node pkg="nodelet" type="nodelet" name="passthrough" args="load pcl/PassThrough $(arg pcl_nodelet_manager)" output="screen">
            <remap from="~input" to="$(arg extractor_output_point_cloud_topic)" />
            <rosparam>
                filter_field_name: z
                filter_limit_min: 0.01
                filter_limit_max: 1.0
                filter_limit_negative: False
            </rosparam>
        </node> -->

        <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
        <node name="voxel_grid" pkg="nodelet" type="nodelet" args="load pcl/VoxelGrid $(arg pcl_nodelet_manager)" output="screen">
            <remap from="~input"                to="$(arg extractor_output_point_cloud_topic)"/>
            
            <rosparam param="filter_field_name" subst_value="True">
                $(arg voxel_grid_filter_axis)
            </rosparam>
            
            <rosparam>
                filter_limit_min: 0.01
                filter_limit_max: 1.0
                filter_limit_negative: False
                leaf_size: 0.005
            </rosparam>
        </node>

    </group>

    <!-- Image Tracking and Point Cloud Extraction Launcher -->
    <include file="$(find arm_vs)/launch/track_and_extract_obj_pointcloud.launch"> 
        
        <arg name="tracker_image_source_topic"                  value="$(arg tracker_image_source_topic)" />
        <arg name="tracker_image_output_topic"                  value="$(arg tracker_image_output_topic)" />
        <arg name="tracker_type"                                value="$(arg tracker_type)" />
        <arg name="tracker_bbox_topic"                          value="$(arg tracker_bbox_topic)" />

        <arg name="inference_topic"                             value="$(arg obj_inference_output_topic)" />
        <arg name="tracked_frame_limit"                         value="15" />
        <arg name="missing_obj_frame_limit"                     value="15" />

        <arg name="extractor_input_point_cloud_topic"           value="$(arg extractor_input_point_cloud_topic)" />
        <arg name="extractor_input_bbox_topic"                  value="$(arg extractor_input_bbox_topic)" />
        <arg name="extractor_output_point_cloud_topic"          value="$(arg extractor_output_point_cloud_topic)" />

    </include>

    <!-- Particle Filter Based Point Cloud Tracking Luancher -->
    <include file="$(find arm_vs)/launch/track_and_align_obj_pointcloud.launch">

        <arg name="icp_or_pf"                                   value="icp_or_pf" />

        <arg name="pose_estimation_pointcloud_input"            value="pose_estimation_pointcloud_input" />
        <arg name="pose_estimation_pointcloud_ouput"            value="pose_estimation_pointcloud_ouput" />
        <arg name="pose_estimation_pointcloud_frame"            value="pose_estimation_pointcloud_frame" />
        <arg name="pose_estimation_template_filename"           value="pose_estimation_template_filename" />

    </include>
    
    <node name="rviz" pkg="rviz" type="rviz" output="screen" if="$(arg rviz_launch)"/>

</launch>